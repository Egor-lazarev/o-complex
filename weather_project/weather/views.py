import requests
from django.shortcuts import render
# from pprint import pprint

from weather.constants import MIN_DAYS
from weather.exceptions import CoordsApiError, CoordsKeyError
from weather.forms import WeatherForm


def decode_weather_code(code):
    weather_map = {
        0: '–Ø—Å–Ω–æ ‚òÄÔ∏è',
        1: '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ üå§',
        2: '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å ‚õÖ',
        3: '–û–±–ª–∞—á–Ω–æ ‚òÅÔ∏è',
        45: '–¢—É–º–∞–Ω üå´',
        48: '–¢—É–º–∞–Ω —Å –∏–Ω–µ–µ–º ‚ùÑÔ∏èüå´',
        51: '–°–ª–∞–±–∞—è –º–æ—Ä–æ—Å—å üåß',
        53: '–£–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å üåßüåß',
        55: '–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å üåßüåßüåß',
        56: '–°–ª–∞–±–∞—è –ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å üí¶‚ùÑÔ∏è',
        57: '–°–∏–ª—å–Ω–∞—è –ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å üí¶üí¶‚ùÑÔ∏è',
        61: '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å üå¶',
        63: '–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å üåß',
        65: '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å üåßüåß',
        66: '–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å (—Å–ª–∞–±—ã–π) üíß‚ùÑÔ∏è',
        67: '–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å (—Å–∏–ª—å–Ω—ã–π) üíßüíß‚ùÑÔ∏è',
        71: '–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥ ‚ùÑÔ∏è',
        73: '–£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥ ‚ùÑÔ∏è‚ùÑÔ∏è',
        75: '–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥ ‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è',
        77: '–°–Ω–µ–∂–Ω–∞—è –∫—Ä—É–ø–∞ üå®',
        80: '–°–ª–∞–±—ã–π –¥–æ–∂–¥–µ–≤–æ–π –ª–∏–≤–µ–Ω—å üí¶',
        81: '–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥–µ–≤–æ–π –ª–∏–≤–µ–Ω—å üí¶üí¶',
        82: '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥–µ–≤–æ–π –ª–∏–≤–µ–Ω—å üí¶üí¶üí¶',
        85: '–°–ª–∞–±—ã–π —Å–Ω–µ–∂–Ω—ã–π –ª–∏–≤–µ–Ω—å ‚ùÑÔ∏èüí¶',
        86: '–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–∂–Ω—ã–π –ª–∏–≤–µ–Ω—å ‚ùÑÔ∏è‚ùÑÔ∏èüí¶',
        95: '–ì—Ä–æ–∑–∞ ‚ö°',
        96: '–ì—Ä–æ–∑–∞ —Å –º–µ–ª–∫–∏–º –≥—Ä–∞–¥–æ–º ‚ö°üßä',
        99: '–ì—Ä–æ–∑–∞ —Å –∫—Ä—É–ø–Ω—ã–º –≥—Ä–∞–¥–æ–º ‚ö°üßäüßä'
    }
    return weather_map.get(code, f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥ –ø–æ–≥–æ–¥—ã: {code} ‚ùì')


def get_coords(city_name):
    geocoding_url = 'https://geocoding-api.open-meteo.com/v1/search'
    try:
        response = requests.get(
            geocoding_url, params={'name': city_name, 'count': 1}
        ).json()
    except requests.exceptions.RequestException:
        raise CoordsApiError('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å –≤–Ω–µ—à–Ω–∏–º API')
    if not response.get('results'):
        raise CoordsKeyError('–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
    latitude = response['results'][0]['latitude']
    longitude = response['results'][0]['longitude']
    return latitude, longitude


def weather_view(request):
    form = WeatherForm(request.GET or None)
    context = {'form': form}
    if form.is_valid():
        weather = None
        city = form.cleaned_data['city_name']
        days = form.cleaned_data['days'] or MIN_DAYS
        try:
            lat, long = get_coords(city)
            weather_url = 'https://api.open-meteo.com/v1/forecast'
            params = {
                'latitude': lat,
                'longitude': long,
                'current': [
                    'temperature_2m',
                    'relative_humidity_2m',
                    'apparent_temperature',
                    'pressure_msl',
                    'precipitation',
                    'rain',
                    'showers',
                    'snowfall',
                    'weather_code',
                    'cloud_cover',
                    'wind_speed_10m',
                    'wind_direction_10m'
                ],
                'daily': 'temperature_2m_max,temperature_2m_min,precipitation_sum,weather_code',
                'timezone': 'auto',
                'forecast_days': days
            }
            weather = requests.get(weather_url, params=params).json()
            if 'daily' in weather:
                daily_forecast = []
                for i in range(len(weather['daily']['time'])):
                    day_data = {
                        'date': weather['daily']['time'][i],
                        'temp_max': weather['daily']['temperature_2m_max'][i],
                        'temp_min': weather['daily']['temperature_2m_min'][i],
                        'precipitation': weather['daily']['precipitation_sum'][i],
                        'weather_code': decode_weather_code(
                            weather['daily']['weather_code'][i]
                        ),
                    }
                    daily_forecast.append(day_data)
                weather['daily_forecast'] = daily_forecast
        except CoordsApiError as error:
            form.add_error(None, str(error))
        except CoordsKeyError as error:
            form.add_error('city_name', str(error))
        except requests.exceptions.RequestException:
            form.add_error(None, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å –≤–Ω–µ—à–Ω–∏–º API')
        except Exception as error:
            form.add_error(None, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(error)}')
        if weather:
            context['weather'] = weather
    return render(request, 'weather/weather.html', context)
